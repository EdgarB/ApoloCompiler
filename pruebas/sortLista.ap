programa prueba;
variables lista entero[11] liGlobal;

funciones


void merge(entero indiceInf, entero indiceMedio, entero indiceFinal)
{
    variables entero i,j,k,tamLiIzq,tamLiDer;
        lista entero[100] liTempIzq, liTempDer;

    tamLiIzq = indiceMedio - indiceInf + 1;
    tamLiDer =  indiceFinal - indiceMedio;


    ciclo (i = -1; i < tamLiIzq - 1; i+=1){
        liTempIzq[i] = liGlobal[indiceInf + i];
    }

    ciclo(j = -1; j < tamLiDer - 1; j+=1){
        liTempDer[j] = liGlobal[indiceMedio + 1+ j];
    }

    i = 0;
    j = 0;
    k = indiceInf;

    ciclo (;i < tamLiIzq && j < tamLiDer;)
    {

        si (liTempIzq[i] <= liTempDer[j])
        {
            liGlobal[k] = liTempIzq[i];
            i+=1;
        }
        sino
        {
            liGlobal[k] = liTempDer[j];
            j+=1;
        };
        k+=1;
    }



    ciclo (;i < tamLiIzq;)
    {
        liGlobal[k] = liTempIzq[i];
        i+=1;
        k+=1;
    }

    ciclo (;j < tamLiDer;)
    {
        liGlobal[k] = liTempDer[j];
        j+=1;
        k+=1;
    }

}


void mergeSort( entero indiceInf, entero indiceSup){
    variables entero indiceMedio;
    si (indiceInf < indiceSup)
    {

        indiceMedio = indiceInf+(indiceSup-indiceInf)/2;


        mergeSort(indiceInf, indiceMedio);
        mergeSort(indiceMedio+1, indiceSup);

        merge(indiceInf, indiceMedio, indiceSup);
    };
}

apolo{
    variables
        entero i;

    liGlobal = [2,31,32,44,1,4,0,12,3,90];

    mergeSort(0,9);
    imprimir("Resultado:");
    ciclo(i=-1;i< 9; i+=1){
        imprimir(liGlobal[i]);
    }


}
